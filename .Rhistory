qplot(drv, data = mpg)
qplot(drv, data = mpg, fill = hwy)
qplot(drv, data = mpg, fill = class)
qplot(hwy, data = mpg, fill = drv)
q()
myedit
rm(list = ls())
q()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xylot
?xyplot
?nlme
View(BodyWeight)
vignette()
?lattice
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2movies)
qplot(Wind, Ozone, data = airquality) + geom_smooth()
rep(1:3, each=4)
rnorm(12)
?rnorm
?rbinom
q()
q()
height <- c(4.0, 4.5, 5.0, 5.2, 5.4, 5.8, 6.1, 6.2, 6.4, 6.8)
weight <- c(42, 44, 49, 55, 53, 58, 60, 64, 66, 69)
datmat <- cbind(height, weight)
with(datmat, plot(height, weight))
View(datmat)
with(datmat, plot(height ~ weight))
rm(list = c(height, weight))
rm(list = (height, weight))
rm(list = list(height, weight))
rm(list = c('height', 'weight'))
with(datmat, plot(height ~ weight))
with(datmat, plot(height, weight))
plot(datmat[,1], datmat[,2])
transform(datmat)
datmat <- transform(datmat)
with(datmat, plot(height, weight))
model <- lm(height ~ weight, datmat)
abline(model)
abline(model, lwd = 2)
View(model)
abline(model, lwd = 2)
with(datmat, plot(height, weight))
abline(model, lwd = 2)
abline(lm(height ~ weight, datmat))
abline(lm(weight ~ height, datmat))
library(datasets)
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", pch = 20))
abline(lm(Ozone ~ Wind, airquality))
par(mfrow = c(1,2))
with(airquality, {})
with(airquality, {)
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
, plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")})
with(airquality, {plot(Wind, Ozone, main = "Ozone and Wind") plot(Solar.R, Ozone, main = "Ozone, and Solar Radiation") })
with(airquality, {plot(Wind, Ozone, main = "Ozone and Wind") + plot(Solar.R, Ozone, main = "Ozone, and Solar Radiation") })
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(airquality, { plot(Wind, Ozone, main = "Ozone and Wind") + plot(Solar.R, Ozone, main = "Ozone and Solar Radiation") + plot(Temp, Ozone, main = "Ozone and Temperature") + mtext("Ozone and Weather in New York City", outer = TRUE) })
rm(list = ls())
set.seed(19)
x <- rnorm(30)
y <- rnorm(30)
plot(x, y, col=rep(1:3, each = 10), pch = 19)
dev.off()
plot(x, y, col=rep(1:3, each = 10), pch = 19)
par(mfrow=c(1, 3))
plot(x, y, col=rep(1:3, each = 10), pch = 19)
reset.par()
dev.off()
plot(x, y, col=rep(1:3, each = 10), pch = 19)
legend("bottomright", legend = paste("Group", 1:3), col = 1:3, pch = 19, bty = 'n')
par(mfrow = c(1, 2))
image(volcano, col = heat.colors(10), main = "heat.colors()")
image(volcano, col = topo.colors(10), main = "topo.colors()")
heat.colors()
heat.colors(10)
?grey
pal <- colorRamp(c('red', 'blue'))
pal(0)
pal(1)
pal(0.5)
pal(2)
pal(-1)
pal(1)
pal(0.5)
seq(0, 1, len = 10)
pal(c('purple', 'black'))
pal <- colorRamp(c('purple', 'black'))
pal(0)
pal <- colorRampPalette(c('red', 'yellow'))
q()
set.seed(1234)
x <- rnorm(12, rep(1:3, each = 4), 0.2)
x <- rnorm(12, rep(c(1, 2, 1), each = 4), 0.2)
set.seed(1234)
x <- rnorm(12, rep(1:3, each = 4), 0.2)
y <- rnorm(12, rep(c(1, 2, 1), each = 4), 0.2)
plot(x, y, col = 'blue', pch = 19, cex = 2)
text(x+0.05, y+0.05, labels=as.character(1:12))
df <- data.frame(x=x, y=y)
dist(df)
rdistxy <- as.matrix(dist(df))
diag(rdistxy)
diag(rdistxy) <- diag(rdistxy)+100000
diag(rdistxy)
rdistxy
rdistxy <- as.matrix(dist(df))
rdistxy
diag(rdistxy) <- diag(rdistxy)+100000
which(rdistxy == min(rdistxy))
which(rdistxy == min(rdistxy), arr.ind = TRUE)
min(rdistxy)
ind <- which(rdistxy == min(rdistxy), arr.ind = TRUE)
View(df)
?which
x
x[ind[1,]]
ind[1,]
par(mfrow = c(1, 2))
plot(x, y, col = 'blue', pch = 19, cex = 2, main="Data")
text(x+0.05, y+0.05, labels=as.character(1:12))
?text
points(x[ind[1,]], y[ind[1,]], col = 'orange', pch=19, cex=2)
library(dplyr)
hcluster <- hclust(dist(df))
dendro <- as.dendrogram(hcluster)
cutDendro <- cut(dendro, h = (hcluster$height[1] + 0.00001))
?cut
plot(cutDendro$lower[[11]], yaxt = 'n', main = "Begin building tree")
dendro
names(dendro)
hcluster
names(hcluster)
hcluster$height
order(rdistxy)
rdistxy[order(rdistxy)][3]
nextmin <- rdistxy[order(rdistxy)][3]
ind <- which(rdistxy == nextmin, arr.ind = TRUE)
ind
hclustering <- hclust(dist(data.frame(x=x, y=y)))
plot(hclustering)
dev.off()
plot(hclustering)
data = as.matrix(mtcars)
head(data)
heatmap(data)
heatmap(data, scale = 'column')
heatmap(data, scale = 'column', Colv = NA, Rowv = NA)
kmeansObj <- kmeans(df, centers = 3)
kmeansObj$cluster
kmeansObj$centers
plot(x, y)
plot(x, y, pch = 19, cex = 2, col = 'blue')
points(kmeansObj)
?par
points(kmeansObj, pch = 3)
points(kmeansObj$centers, pch = 3)
plot(x, y, pch = 19, cex = 2, col = c(rep('blue', 4), rep('orange', 4), rep('red', 4)))
points(kmeansObj$centers, pch = 3, col('blue', 'orange', 'red'))
points(kmeansObj$centers, pch = 3, col= c('blue', 'orange', 'red'))
points(kmeansObj$centers, pch = 3, col= c('blue', 'orange', 'red'), cex = 2)
rm(list = ls())
set.seed(1234)
10:1
q()
q()
library(dplyr)
"devtools" %in% installed.packages()
library(devtools)
"shiny" %in% installed.packages()
install github("StatsWithR/statsr")
install_github("StatsWithR/statsr")
q()
?rnorm
rnorm(100)
mean(rnorm(100))
mean(rnorm(1000))
mean(rnorm(10000))
mean(rnorm(100000))
mean(rnorm(100000))
mean(rnorm(100000))
mean(rnorm(100000))
q()
summary(cars)
cars
pressure
?cars
?pressure
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
dim(arbuthnot)
range(arbuthnot$year)
quantile(arbuthnot$year)
summary(arbuthnot$year)
summary(arbuthnot)
?which
which(arbuthnot, boys==min(arbuthnot$boys))
which(boys==min(arbuthnot$boys), arbuthnot)
which(boys==min(arbuthnot$boys))
which(arbuthnot$boys==min(arbuthnot$boys))
arbuthnot[which(arbuthnot$boys==min(arbuthnot$boys)),]
arbuthnot[which(arbuthnot$boys==min(arbuthnot$boys)),]
subset(arbuthnot, boys==min(boys))
# type your code for the Question 2 here, and Knit
arbuthnot$girls
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
View(arbuthnot)
ggplot(arbuthnot, aes(x = year, y = total)) + geom_line()
ggplot(arbuthnot, aes(x = year, y = total)) + geom_line() + geom_point()
arbuthnot <- arbuthnot %>% mutate(more_boys = boys > girls)
View(arbuthnot)
data(present)
range(present$year)
View(arbuthnot)
View(present)
View(present)
# type your code for Question 5 here, and Knit
present <- present %>% mutate(total = boys + girls, prop_boys = boys/total)
View(present)
View(present)
present <- mutate(present, more_boys = boys > girls)
View(present)
?arrange
arrange(present, desc(total))
28.38
28/38
28/36
(51/55)-(38/52)
install.packages("kernlab")
library(kernlab)
data("spam")
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
testbinom <- rbinom(4601, size = 2, prob = c(0.6, 0.2, 0.2))
table(testbinom)
testbinom <- rbinom(4601, size = 2, prob = c(0.6, 0.2))
table(testbinom)
testbinom <- rbinom(4601, size = 3, prob = c(0.6, 0.2, 0.2))
table(testbinom)
?rbinom
rbinom(8, size = 3, prob = 0.6)
rbinom(8, size = 3, prob = 0.5)
rbinom(8, size = 3, prob = 0.1)
rbinom(8, size = 3, prob = 0.7)
rm(testbinom)
trainSpam <- spam[trainIndicator == 1,]
testSpam <- spam[trainIndicator == 0, ]
head(names(spam))
head(trainSpam)
head(trainSpam[, 1:10])
table(trainSpam$type)
boxplot(capitalAve ~ type, data = trainSpam)
View(testSpam)
?spam
boxplot(log10(capitalAve + 1) ~ type, data = trainSpam)
boxplot(log(capitalAve) ~ type, data = trainSpam)
?log
pairs(log(testSpam[,1:4] + 1))
?pairs
hCluster <- hclust(dist(t(trainSpam[, 1:57])))
plot hCluster
plot(hCluster)
hCluster <- hclust(dist(t(trainSpam[, 1:55])))
plot(hCluster)
hCluster <- hclust(dist(t(log(trainSpam[, 1:55])))
)
hCluster <- hclust(dist(t(log(trainSpam[, 1:55]))))
hCluster <- hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hCluster)
hCluster <- hclust(dist(t(log(trainSpam[, 1:55] + 1))))
plot(hCluster)
library(kernlab)
?spam
plot(hCluster)
class(trainSpam$type)
unclass(trainSpam$type)
trainSpam$numType <- as.numeric(trainSpam$type) - 1
type(trainSpam$type)
str(trainSpam$type)
costFunction <- function(x, y) {sum(x != (y > 0.5))}
cvError = rep(NA, 55)
for (i in 1:55) {}
for (i in 1:55) {
library(boot)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit <- glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] <- cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
View(trainSpam)
names(trainSpam[which.min(cvError)])
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
unzip('activity.zip')
PAMData <- read.csv('activity.csv')
View(PAMData)
?as.Date
?strptime
summary(PAMData$date)
PamData <- read.csv('activity.csv')
rm(PAMData)
PamData$date <- strptime(PamData$date)
PamData$date <- strptime(PamData$date, format = "%Y-%m-%d")
View(PamData)
summary(PamData$date)
288*5
24*12
library(dplyr)
PamData %>% group_by(date) %>% summarise(meansteps = mean(steps, na.rm = T))
library(statsr)
library(dplyr)
library(ggplot2)
data(kobe_basket)
View(kobe_basket)
head(kobe_basket)
head(kobe_basket, 10)
calc_streak
kobe_streak <- calc_streak(kobe_basket$shot)
ggplot(data = kobe_streak, aes(x = length)) +
geom_histogram(binwidth = 1)
length(kobe_streak)
length(kobe_streak[1])
length(kobe_streak[1,])
length(kobe_streak[,1])
median(kobe_basket)
median(kobe_basket[,1])
View(kobe_streak)
median(kobe_streak[,1])
IQR(kobe_streak[,1])
# type your code for the Exercise here, and Knit
sim_streak <- data.frame(calc_streak(sim_basket))
# type your code for the Exercise here, and Knit
sim_basket <- sample(c("H", "M"), size = 133, replace = T, prob = c(0.45, 0.55))
# type your code for the Exercise here, and Knit
sim_streak <- data.frame(calc_streak(sim_basket))
ggplot(data = sim_streak, aes(x = length)) + geom_histogram(binwidth = 1)
setwd('/media/umair/F00E03AB0E0369C4/Studies/GitRepos/Storm data analysis/')
ls
list.files()
list.files()
unzip('repdata_data_StormData.csv.bz2')
stormdata_raw <- read.csv("repdata_data_StormData.csv.bz2")
rm(PamData)
object.size(stormdata_raw)
object.size()/(1024^2)
object.size(stormdata_raw)/(1024^2)
object.size(stormdata_raw, units = "auto", standard = "IEC")
format(object.size(stormdata_raw), units = "auto")
str(stormdata_raw)
names(stormdata_raw)
summary(stormdata_raw$EVTYPE)
str(stormdata_raw$EVTYPE)
len(stormdata_raw$EVTYPE)
length(stormdata_raw$EVTYPE)
View(head(stormdata_raw))
unclass(stormdata_raw$PROPDMGEXP)
unclass(stormdata_raw$CROPDMGEXP)
levels(stormdata_raw$PROPDMGEXP)
levels(stormdata_raw$EVTYPE)
agrep('Wind', stormdata_raw$EVTYPE, max.distance = 3, value = T, ignore.case = T)
agrep('Wind', levels(stormdata_raw$EVTYPE), max.distance = 3, value = T, ignore.case = T)
agrep('Wind', levels(stormdata_raw$EVTYPE), max.distance = 0.1, value = T, ignore.case = T)
agrep("laysy", c("1 lazy", "1", "1 LAZY"), max = 2)
agrep("laysy", c("1 lazy", "1", "1 LAZY"), max = 2, value = T)
agrep("laysy", c("1 lazy", "1", "1 LAZY"), max.distance = 2, value = T)
agrep("laysy", c("1 lazy", "1", "1 LAZY"), max.distance = 1, value = T)
agrep("laysy", c("1 lazy", "1", "1 LAZY"), max.distance = 2, value = T)
agrep("lazy", c("1 lazy", "1", "1 LAZY"), max.distance = 2, value = T)
agrep("lazy", c("1 lazy", "1", "1 LAZY"), max.distance = 3, value = T)
agrep("lazy", c("1 lazy", "1", "1 LAZY"), max.distance = 1, value = T)
agrep("lazy", c("1 lazy", "1", "1 LAZY", " lazy"), max.distance = 1, value = T)
agrep("lazy", c("1 lazy", "1", "1 LAZY", " lazy"), max.distance = 1, value = T, ignore.case = T)
agrep("lazy", c("1 lazy", "lazzy", "1", "1 LAZY", " lazy"), max.distance = 1, value = T, ignore.case = T)
agrep("lazy", c("1 lazy", "lazzy", " layzey" "1", "1 LAZY", " lazy"), max.distance = 1, value = T, ignore.case = T)
agrep("lazy", c("1 lazy", "lazzy", " layzey", "1", "1 LAZY", " lazy"), max.distance = 1, value = T, ignore.case = T)
agrep("lazy", c("1 lazy", "lazzy", " layziey ", "1", "1 LAZY", " lazy"), max.distance = 1, value = T, ignore.case = T)
agrep("lazy", c("1 lazy", "lazzy", " layziey ", "lassy", "1", "1 LAZY", " lazy"), max.distance = 1, value = T, ignore.case = T)
agrep("lazy", c("1 lazy", "lazzy", " layziey ", "lasy", "1", "1 LAZY", " lazy"), max.distance = 1, value = T, ignore.case = T)
adist("lazy", c("1 lazy", "lazzy", " layziey ", "lasy", "1", "1 LAZY", " lazy"), max.distance = 1, value = T, ignore.case = T)
adist("lazy", c("1 lazy", "lazzy", " layziey ", "lasy", "1", "1 LAZY", " lazy"), ignore.case = T)
library(stringr)
str_detect(c('Astronomical', 'Tide'), stormdata_raw$EVTYPE)
str_detect(c('Astronomical', 'Tide'), levels(stormdata_raw$EVTYPE))
str_detect(Tide', levels(stormdata_raw$EVTYPE))
str_detect('Tide', levels(stormdata_raw$EVTYPE))
levels(stormdata_raw$EVTYPE)
str_detect(levels(stormdata_raw$EVTYPE), 'Astronomical')
str_extract('Tide', levels(stormdata_raw$EVTYPE))
str_extract(levels(stormdata_raw$EVTYPE), 'Astronomical')
?`stringr-package`
View(levels(stormdata_raw$EVTYPE))
agrep("Avalanche", levels(stormdata_raw$EVTYPE), value = T)
agrep("Avalanche", levels(stormdata_raw$EVTYPE), value = T, ignore.case = T)
agrep("Avalanche", levels(stormdata_raw$EVTYPE), ignore.case = T)
newlevels <- levels(stormdata_raw$EVTYPE)
class(newlevels)
newlevels <- stormdata_raw$EVTYPE
length(levels(newlevels))
newlevels[10]
newlevels[11]
newlevels[newlevels==levels(newlevels)[c(10, 11, 312)]]
newlevels[newlevels=='AVALANCE']
which(newlevels=='AVALANCE')
}
which(newlevels=='AVALANCE')
newlevels[214947]
str_detect(newlevels[newlevels==levels(newlevels)[c(10, 11, 312)]], pattern = 'AVALANCE')
sum(str_detect(newlevels[newlevels==levels(newlevels)[c(10, 11, 312)]], pattern = 'AVALANCE'))
which(newlevels==levels(newlevels)[c(10, 11, 312)])
checkresults <- which(newlevels==levels(newlevels)[c(10, 11, 312)])
checkresults <- which(newlevels %in% levels(newlevels)[c(10, 11, 312)])
checkresults
checkframe <- data.frame(oldlevels=newlevels)
levels(newlevels) <- list(AVALANCHE=agrep("Avalanche", levels(stormdata_raw$EVTYPE), value = T, ignore.case = T))
levels(newlevels)
newlevels <- checkframe$oldlevels
length(levels(newlevels))
levels(newlevels)[levels(newlevels)==agrep("Avalanche", levels(stormdata_raw$EVTYPE), value = T, ignore.case = T)] <- 'AVALANCHE'
length(levels(newlevels))
checkframe$newlevels <- newlevels
checkframe[checkresults,]
rm(newlevels)
checklevels <- stormdata_raw$EVTYPE
cleanup <- function(desiredpat, targetfactor) {
levels(targetfactor)[levels(targetfactor)==agrep(desiredpat, levels(targetfactor),
value = TRUE, ignore.case = TRUE)] <- desiredpat
}
cleanup('AVALANCHE', checklevels)
length(levels(checklevels))
cleanup <- function(desiredpat, targetfactor) {
levels(targetfactor)[levels(targetfactor)==agrep(desiredpat, levels(targetfactor),
value = TRUE, ignore.case = TRUE)] <<- desiredpat
}
cleanup('AVALANCHE', checklevels)
checklevels <- stormdata_raw$EVTYPE
cleanup('AVALANCHE', checklevels)
levels(checklevels)[levels(checklevels)==agrep('AVALANCHE', levels(checklevels), value = T, ignore.case = T)] <- 'AVALANCHE'
length(checklevels)
length(levels(checklevels))
checkframe$newlevels <- checklevels
checkframe[checkresults]
checkframe[checkresults,]
length(levels(checklevels))
checklevels <- stormdata_raw$EVTYPE
length(levels(checklevels))
agrep("AVALANCHE", levels(checklevels), value = TRUE, ignore.case = TRUE)
agrep("ASTRONOMICAL", levels(checklevels), value = TRUE, ignore.case = TRUE)
agrep("ASTRONOMICAL LOW TIDE", levels(checklevels), value = TRUE, ignore.case = TRUE)
agrep("STRONG WIND", levels(checklevels), value = TRUE, ignore.case = TRUE)
agrep("HEAVY SNOW", levels(checklevels), value = TRUE, ignore.case = TRUE)
agrep("HEAVY RAIN", levels(checklevels), value = TRUE, ignore.case = TRUE)
agrep(c("HEAVY RAIN", "heavy shower"), levels(checklevels), value = TRUE, ignore.case = TRUE)
list(c('heavy rain', 'heavy shower'))
list('heavy rain', 'heavy shower')
testlist <- list('heavy rain', 'heavy shower')
lapply(testlist, function(x) agrep(x, levels(checklevels), value = TRUE, ignore.case = TRUE))
agrep("HEAVY RAIN", levels(checklevels), ignore.case = TRUE)
checklevels[agrep("HEAVY RAIN", levels(checklevels), ignore.case = TRUE)]
levels(checklevels[agrep("HEAVY RAIN", levels(checklevels), ignore.case = TRUE)])
levels(checklevels)[agrep("HEAVY RAIN", levels(checklevels), ignore.case = TRUE)]
append(checkresults, agrep("HEAVY RAIN", levels(checklevels), ignore.case = TRUE))
checkresults <- append(checkresults, agrep("HEAVY RAIN", levels(checklevels), ignore.case = TRUE))
checkresults <- append(checkresults, agrep("HEAVY SHOWER", levels(checklevels), ignore.case = TRUE))
testlist
testlist <- append(testlist, 'avalanche')
View(testlist)
lapply(testlist, function(x) {levels(checklevels)[levels(checklevels)==agrep(x, levels(checklevels), value = T, ignore.case = T)] <- x})
length(levels(checklevels))
head(levels(checklevels))
lapply(testlist, function(x) levels(checklevels)[levels(checklevels)==agrep(x, levels(checklevels), value = T, ignore.case = T)] <- x)
length(levels(checklevels))
lapply(testlist, function(x) agrep(x, levels(checklevels), value = T, ignore.case = T))
levels(checklevels)[levels(checklevels)==agrep('HEAVY SHOWERS', levels(checklevels), value = T, ignore.case = T)] <- 'HEAVY SHOWERS'
levels(checklevels)[levels(checklevels)==agrep('HEAVY RAIN', levels(checklevels), value = T, ignore.case = T)] <- 'HEAVY RAIN'
levels(checklevels)[levels(checklevels)==agrep('AVALANCHE', levels(checklevels), value = T, ignore.case = T)] <- 'AVALANCHE'
length(levels(checklevels))
levels(checklevels)[levels(checklevels)==agrep('HEAVY RAIN', levels(checklevels), value = T, ignore.case = T)] <- 'HEAVY RAIN'
length(levels(checklevels))
levels(checklevels)[levels(checklevels)==agrep('heavy rain', levels(checklevels), value = T, ignore.case = T)] <- 'HEAVY RAIN'
length(levels(checklevels))
checkresults <- which(newlevels %in% levels(newlevels)[c(10, 11, 312)])
checkresults <- which(checkresults %in% levels(checkresults)[c(10, 11, 312)])
checkresults <- which(checklevels %in% levels(checklevels)[c(10, 11, 312)])
checklevels[checkresults]
levels(checklevels)[c(10, 11, 312)]
agrep('avalanche', checklevels, ignore.case = T)
agrep('avalanche', levels(checklevels), ignore.case = T)
agrep('AVALANCHE', levels(checklevels), ignore.case = T)
checklevels <- stormdata_raw$EVTYPE
agrep('AVALANCHE', levels(checklevels), ignore.case = T)
checkresults <- which(checklevels == levels(checklevels)[agrep('AVALANCHE', levels(checklevels), ignore.case = T)])
checkresults <- which(checklevels %in% levels(checklevels)[agrep('AVALANCHE', levels(checklevels), ignore.case = T)])
